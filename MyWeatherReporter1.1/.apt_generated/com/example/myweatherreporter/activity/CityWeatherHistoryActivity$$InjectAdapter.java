// Code generated by dagger-compiler.  Do not edit.
package com.example.myweatherreporter.activity;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<CityWeatherHistoryActivity>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code CityWeatherHistoryActivity} and its
 * dependencies.
 *
 * Being a {@code Provider<CityWeatherHistoryActivity>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<CityWeatherHistoryActivity>} and handling injection
 * of annotated fields.
 */
public final class CityWeatherHistoryActivity$$InjectAdapter extends Binding<CityWeatherHistoryActivity>
    implements Provider<CityWeatherHistoryActivity>, MembersInjector<CityWeatherHistoryActivity> {
  private Binding<Provider<com.example.myweatherreporter.beans.CityHistoryOneDay>> CityHistoryOneDayProvider;
  private Binding<com.example.myweatherreporter.listadapter.CustomCityHistoryListAdapter> adapter;
  private Binding<com.example.myweatherreporter.beans.City> city;
  private Binding<Provider<com.example.myweatherreporter.beans.CityWeather>> cityWeatherProvider;
  private Binding<java.util.ArrayList<com.example.myweatherreporter.beans.CityHistoryOneDay>> dateList;
  private Binding<CityWeatherHistoryBaseActivity> supertype;

  public CityWeatherHistoryActivity$$InjectAdapter() {
    super("com.example.myweatherreporter.activity.CityWeatherHistoryActivity", "members/com.example.myweatherreporter.activity.CityWeatherHistoryActivity", NOT_SINGLETON, CityWeatherHistoryActivity.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    CityHistoryOneDayProvider = (Binding<Provider<com.example.myweatherreporter.beans.CityHistoryOneDay>>) linker.requestBinding("javax.inject.Provider<com.example.myweatherreporter.beans.CityHistoryOneDay>", CityWeatherHistoryActivity.class, getClass().getClassLoader());
    adapter = (Binding<com.example.myweatherreporter.listadapter.CustomCityHistoryListAdapter>) linker.requestBinding("com.example.myweatherreporter.listadapter.CustomCityHistoryListAdapter", CityWeatherHistoryActivity.class, getClass().getClassLoader());
    city = (Binding<com.example.myweatherreporter.beans.City>) linker.requestBinding("com.example.myweatherreporter.beans.City", CityWeatherHistoryActivity.class, getClass().getClassLoader());
    cityWeatherProvider = (Binding<Provider<com.example.myweatherreporter.beans.CityWeather>>) linker.requestBinding("javax.inject.Provider<com.example.myweatherreporter.beans.CityWeather>", CityWeatherHistoryActivity.class, getClass().getClassLoader());
    dateList = (Binding<java.util.ArrayList<com.example.myweatherreporter.beans.CityHistoryOneDay>>) linker.requestBinding("java.util.ArrayList<com.example.myweatherreporter.beans.CityHistoryOneDay>", CityWeatherHistoryActivity.class, getClass().getClassLoader());
    supertype = (Binding<CityWeatherHistoryBaseActivity>) linker.requestBinding("members/com.example.myweatherreporter.activity.CityWeatherHistoryBaseActivity", CityWeatherHistoryActivity.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(CityHistoryOneDayProvider);
    injectMembersBindings.add(adapter);
    injectMembersBindings.add(city);
    injectMembersBindings.add(cityWeatherProvider);
    injectMembersBindings.add(dateList);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<CityWeatherHistoryActivity>}.
   */
  @Override
  public CityWeatherHistoryActivity get() {
    CityWeatherHistoryActivity result = new CityWeatherHistoryActivity();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<CityWeatherHistoryActivity>}.
   */
  @Override
  public void injectMembers(CityWeatherHistoryActivity object) {
    object.CityHistoryOneDayProvider = CityHistoryOneDayProvider.get();
    object.adapter = adapter.get();
    object.city = city.get();
    object.cityWeatherProvider = cityWeatherProvider.get();
    object.dateList = dateList.get();
    supertype.injectMembers(object);
  }

}
